
\section{Gestione delle chiavi private di crittografia assimetrica}
In quanto dobbiamo ricordare che entrambe le parti della comunicazione devono
essere a conoscenza della sua chiave privata, tramite la quale si assicura la
sicurezza della comunicazione all'interno del canale; tuttavia si ha il 
problema che, entro un certo periodo di tempo, bisogna considerare l'eventualità
che questa chiave possa essere stata scoperta, rendendosi quindi necessario
il suo cambiamento. Da ciò pertanto nasce l'esigenza di gestire opportunamente
le chiavi associate al canale di comunicazione.

\subsection{Protocollo di Needham-Schroeder}
Assumiamo pertanto che esista un'autorità fidata che indicheremo con \bf{KDS} 
(acronimo per \it{Key Distribution Server}), che conosce a priori una chiave
privata associata a ciascun utente del sistema\footnote{Se così non fosse,
si avrebbe un problema ulteriore da gestire per quanto riguarda lo scambio di
quella chiave primaria all'interno del sistema.}, 
ed è quindi è riconosciuta
come autorevole da tutti gli utenti del sistema (si preoccupa quindi di non
divulgare le informazioni degli altri utenti o comunque di renderle sicure, e che
quindi potrà subire un attacco con successo con una bassa probabilità).
Se vogliamo che \tt A e \tt B possano comunicare privatamente, possiamo fare in
modo che tale \tt{KDS} fornisca una nuova chiave di sessione, ogni volta che
si vuole stabilire una nuova comunicazione. 
Per evitare attacchi di replica di messaggi (ovvero, un intruso potrebbe
benissmo entrare in possesso di un messaggio, ed inviarlo ripetutamente a 
destinazione), verranno utilizzati come segnatempo dei \bf{nonces} (\it{number
user once}) che indicheremo con $N_i$. 
%enumerate
\item \tt A invia un messaggio al \tt{KDS} nella forma $\Set{A,B,N_1}$
\item \tt il \tt{KDS} invia la chiave di sessione $k_S$ ad \tt A nella forma:
	\[C(k_A,\Set{k_S,A,B,N_1,C(k_B,\Set{k_S,A})})\]
	In questo modo il messaggio potrà essere solamente letto da A, ed inoltre
	il contenuto $\Set{k_S,A}$ potrà essere letto solo da \tt B e non da \tt A
	in quanto solo \tt B conoscerà la sua chiave privata. A questo punto,
	il valore di $k_A$ può anche essere dimenticato da \tt A, ovvero può
	uscire dal sistema.
\item \tt B invia ad \tt A una \it{challenge} $C(k_S,N_2)$
\item \tt A risponde a \tt B con una \it{response} $C(k_S,N_2+1)$. Con $N_2+1$ intendiamo una qualsiasi
	modifica al $N_2$ prevista dal protocollo in qualche modo, di modo da
	evitare attacchi che prevedono unicamente la risposta con ricopiatura
	del messaggio.
\item A questo punto la comunicazione all'interno del canale è da ritenersi sicura
.%

Ora risulta ovvio che se \tt A vuole comunicare con un altro \tt C, debba rieffettuare
il meccanismo di cui sopra per ottenere un'altra chiave segreta per la comunicazione.

\subsection{Kerberos}
Un'ulteriore modifica allo schema precedente è presentato dallo schema \bf{Kerberos},
con l'unica differenza che si interpone un \tt{TGS} (\it{Ticket Granting Server}),
con il quale, comunicando col TGS con la chiave $k_S$ del \tt{KDS} (per tutta la 
sessione si scambierà $k_s$ e non il segreto $k_A$) , si tende a minimizzare 
la vulnerabilità iniziale della diffusione della chiave $k_{AB}$ (fornita da 
quest'ultimo) possa essere intercettata da un ulteriore uditore  malintenzionato.
Perché $k_s$ è generato casualmente, spesso \tt{KDS} è all'interno dello stessa implementazione dove è anche presente 
\tt{TGS}, ma giocano due ruoli differenti all'interno del sistema. Ulteriori
differenze sono le seguenti:
%itemize
\item \tt A, per stabilire una nuova comunicazione con un elemento differente del
	sistema, dovrà ricominciare la sua comunicazione con \tt{TGS} utilizzando
	la chiave $k_S$ generata automaticamente, e non con il segreto $k_A$.
\item Per evitare in un sistema imponente che sia proprio il \tt{KDS} il collo di
	bottiglia (inoltre, se si attaccasse questo unico punto, il sistema
	salterebbe), si possono replicare tali elementi secondo un principio di
	\it{master-slave}:
	%itemize
	\item si può decentralizzare per evitare il DoS, e quindi far utilizzare
		il server \tt{KDS} più vicino; può essere anche utilizzato per
		effettuare load-balancing delle richieste, qualora ci siano più
		\tt{KDS} attivi, in modo da evitare che uno stesso server risulti
		subissato dalle richieste.
	\item si deve inoltre creare un server \it{master} e gli altri \it{slave} in
		quanto, se i dati che vengono gestiti sono del tipo \it{Read-Write},
		come in questo caso la gestione delle chiavi (lettura ed aggiornamento),
		possiamo avere problemi di concorrenza sulla modifica dei valori,
		in quanto in parti differenti del sistema, potrei in uno stesso
		momento ottenere valori differenti per uno stesso dato. In quanto
		l'atto della modifica della chiave è più rara della sua lettura
		o comunque controllo, seguendo un approccio \it{master-slave},
		non si introducono sostanziali colli di bottiglia.
	.%
.%

Sebbene questo sistema garantisca la riservatezza e l'autenticazione, e mantiene
buone prestazioni anche con un frequente cambiamento delle chiavi, riducendo
inoltre il numero delle chiavi da mantenere da $n^2$ ad $n$, rimane il grosso
svantaggio della solidità del server \tt{KDS}. Possiamo quindi mantenere un (primo)
approccio ibrido nel seguente modo:
%itemize
\item \tt A genera una coppia $(pub_{A},priv_{A})$
\item \tt A invia a \tt B ${pub_A,A}$: \it{questa parte rimane soggetta a man-in-the-middle attack}, 
	ovvero non garantisce autenticazione.
\item \tt B genera casualmente la chiave di sessione $k_S$ e la invia ad \tt A: $C(pub_A,k_S)$
\item \tt A ottiene quindi la chiave pubblica dal messaggio ricevuto adoperando la sua chiave privata
\item A questo punto \tt A può dimenticare la sua coppia di chiavi, utilizzando all'interno
	del canale unicamente la crittografia asimmetrica 
.%
I problemi di cui sopra possono essere risolti nel seguente modo, supponendo che
le chiavi private e pubbliche siano già distribuite:
%itemize
\diam Le chiavi pubbliche sono già state distribuite
\diam Si garantisce autentificazione (per evitare il man in the middle attack) tramite il TWH $C(pub_B,\Set{A,N_1})\to C(pub_A,\Set{N_1,N_2})\to C(pub_B,N_2)$
\diam Si garantisce riservatezza tramite la chiave privata e pubblica:
	$\tt A\to\tt B: C(pub_B,D(piv_A,S))$
.%
