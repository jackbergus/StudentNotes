\chapter{Meccanismi di accesso}
L'autentificazione è necessaria per realizzare l'autorizzazione: infatti non
vogliamo solamente autentificare quegli utenti che avrebbero le credenziali per
accedere al sistema, ma vogliamo anche essere in grado di controllare le azioni
che questi compiono all'interno del sistema. 


In questa sezione parleremo come strutturare un sistema informatico in modo da
garantire il controllo degli accessi tramite il \it{principio di privilegio 
minimo}, in base al quale si concedono agli utenti quei privilegi minimi, in
modo che questi possano effettuare tutti i compiti che sono loro permessi. Questo
è inoltre necessario nella misura in cui potrei abusare dei privilegi aggiuntivi
che mi sono stati concessi, anche perché non possiamo prevedere se quel dato
utente in un futuro presenterà o meno un comportamento che potrebbe a violare
l'integrità del sistema. Infatti, anche se non direttamente quell'utente potrebbe
portare a minare l'integrità del sistema, tramite i programmi
che ha installato. In questo modo si potrebbero inoltre prevenire eventuali
programmi di spyware o malaware che utilizzano appunto i privilegi degli utenti.
Utilizzando quindi i meccanismi di \bf{complete mediation} creiamo un monitor
detto \bf{reference monitor} inglobato all'interno del \bf{trusted computing base}
(ovvero un'area del sistema operativo di cui si è comprovata la sicurezza)
tramite il quale possiamo effettuare il controllo  degli accessi all'interno del 
\it{kernel mode}. Inoltre possiamo garantire che l'utente non possa accedere
direttamente alla periferica utilizzando l'interazione fornita dalle \it{system
call}: queste verranno quindi intercettate ed eseguite all'interno del
Reference Monitor, in modo da poter controllare ogni azione del programma che
richieda un'interazione con il mondo esterno.


Bisogna inoltre sottolineare che l'\bf{autorizzazione} non è solo un meccanismo 
mediante il quale si può permettere di garantire o bloccare gli accessi, ma è 
un insieme di politiche o di meccanismi che sono mirati a controllare se un 
utente è autorizzato a compiere o meno delle date azioni su di un determinato 
oggetto. Inoltre i meccnismi di protezione quali l'autentificazione sono 
necessari per poter garantire, a questo punto, l'autorizzazione.


Valuteremo quindi la presenza di tre possibili attori; si ha:
%itemize
\diam un insieme di soggetti $S$, che compiono determinati accessi ed azioni
	permessi: è un soggetto \bf{attivo}, anche se pure i soggetti possono
	subire delle azioni (possono essere altri oggetti): un esempio di soggetti
	sono i processi nei sistemi operativi e nei linguaggi object oriented, e le
	transazione all'interno dei DBMS.
\diam un insieme di oggetti $O$, che subiscono delle azioni da parte di un 
	soggetto, e soddisfa delle sue richieste: un esempio di oggetti sono
	le risorse nei sistemi operativi, gli oggetti e le classi nei linguaggi
	object oriented, e le tabelle nei DBMS.
\diam un insieme di accessi dei soggetti sugli oggetti: nei sistemi operativi
	sono le azioni Read/Write/Execute, sono i metodi definiti nelle classi
	per i linguaggi object oriented, e le operazioni primitive di SQL per 
	i DBMS.
.%
Si definiscono inoltre i seguenti principi fondamentali:
%description
\item[Fail Safe Defaults] secondo questo principio, nessun processo e conseguentemente
	nessun utente, possiedono già dei permessi di default, ed inizialmente
	questi hanno permessi di accessi nulli. Dovrà essere l'amministratore
	in una fase successiva, a fornire agli utenti gli opportuni accessi.
\item[Mediated Access] Utilizzo dei Reference Monitor come descritto sopra.
\item[Separazione dei privilegi] un sistema non dovrebbe consentire
	un accesso incondizionato ai privilegi di superutente tramite la 
	conoscenza di una sola informazione: ad esempio Unix non permette di
	effettuare l'accesso come superutente solamente conoscendone la password,
	ma anche tramite l'appartenenza al gruppo dei \it{sudoers}. In questo
	modo si effettua prima l'accesso come utente normale, conoscendo quindi
	la propria password, e poi si effettuerà l'accesso come ROOT tramite 
	un'altra password e l'appartenenza al gruppo dei sudoers. Si può quindi
	fare un'analogia con la strong authentication, tramite la quale non si ha
	accesso al token solamente possedendolo, ma anche conoscendone un pin.
.%

Possiamo inoltre definire un \bf{dominio di protezione} tramite una coppia 
costituita dall'oggetto, e dalle azioni che si possono effettuare su di questo:
un soggetto può quindi lavorare all'interno di un \it{dominio di protezione}, che
può contenere più coppie di quel tipo. Banalmente possiamo avere due domini di
protezione quali il \bf{kernel mode}, dove sono possibili tutte le operazioni
su tutti gli oggetti, e lo \bf{user mode}, con il quale l'utente può gestire
unicamente gli oggetti che lui stesso ha creato. Tuttavia questa organizzazione
è estremamente grossolana: se un processo di fatti nascesse e morisse in un
dominio senza poter effettuare trasferimenti, sarebbe poco utile, mentre è
maggiormente utile un sistema dinamico, ovvero che può muoversi di dominio:
tramite le systemcall inoltre, si può permettere il passaggio da modo user a 
modo kernel, unicamente per effettuare la verifica sulla possibilità da parte
dell'utente di effettuare quell'operazione.


Possiamo raggruppare tutti queste credenzialità tramite una tabella, dove
l'elemento $access(i,j)$ rappresentano gli accessi possibili per quel dominio
$D_i$ gli accessi permessi su di un oggetto $O_j$, dove se tale cella è vuota,
allora si indicherà che quell'utente non ha permessi di accesso per quell'oggetto.
Possiamo quindi specificare che, nella suddetta tabella, gli indici dei domini
sono disposti sulle righe, mentre sulle colonne sono disposti i nomi degli oggetti
dei quali si vogliono pilotare gli accessi.
Supponiamo tuttavia di avere sue processi su domini differenti (anche se più
processi possono operare sullo stesso dominio contemporaneamente): vogliamo 
implementare una codifica tale che il processo utente effettui un accesso (es.)
ad un dizionario, senza però accedere a tutto il file. Possiamo quindi 
introdurre un nuovo dominio, all'interno del quale sia unicamente possibile
effettuare l'accesso in lettura su tutto il file: gli altri processi che
vorranno accedere al dizionario, potranno spostarsi dal loro dominio in questo
unicamente per la fase di accesso al contenuto del dizionario effettuando 
un'operazione di \bf{switch}, durante la quale il processo eredita i permessi
che aveva precedentemente per quello stesso file, ed aggiungendo quelli del 
nuovo dominio verso il quale ha transitato. L'operazione di switch prevede
anche di ritornare, dopo aver effettuato l'operazione che richiedeva il cambio
di dominio, a quello posseduto precedentemente. Bisogna inoltre sottolineare
che, quando si effettua lo switch, viene aggiunta un'altra riga alla tabella dei
permmessi

In quel modo tuttavia, i due processi prenderanno il permesso di effettuare 
la lettura completa su tutto il file: tuttavia bisogna precisare che questo
passaggio di accesso al dizionario avverrà tramite system call, e quindi verranno
concessi quei nuovi permessi tramite shift solamente per la durata di quella 
operazione, che verrà fornita da una apposita libreria che provvederà a garantire
che non vengano effettuate letture complete di tutto il file, ottenendo solamente
da questo i valori richiesti da quell'interrogazione. Inoltre bisogna evitare il
caso in cui un altro processo, che appartiene allo stesso dominio di un altro,
si appropri indebitamente dai privilegi ottenuti dal precedente: è quindi opportuno
che ogni processo effettui la copia dei suoi privilegi e li aggiorni eventualmente
con quelli che gli vengono concessi tramite gli shift, in modo da mantenere 
distinte le ``estensioni'' dei vari domini dei processi.


Tramite il comando \tt{setuid} ad esempio, un processo può temporaneamnete 
assumere un determinato dominio di protezione, esclusivamente per la durata
di quel processo; essendo inoltre quell'azione scritta da root per gli utenti,
saranno azioni sicure ad esempio, anche se il comando \tt{passwd} richiede i 
privilegi di superutente, sarà possibile modificare le password degli utenti
che hanno invocato quel dato comando: questo è inoltre possibile perché tale
programma, mantiene in memoria le informazioni dell'utente che lo ha invocato.
Da ciò segue che il meccanismo di switch nei sistemi Unix è fornito proprio dal
comando \tt{setuid}.

\section{ACL e Capability}
Continuando la discussione nell'ambito dei sistemi operativi, ci chiediamo a 
questo punto quali sono le modalità di possibile rappresentazione della tabella
in questione. 
%itemize
\diam Possiamo memorizzare l'intera tabella come struttura dati matrice all'interno
	del sistema. Tuttavia questa soluzione non è facilmente implementabile,
	in quanto le dimensioni della tabella sono variabili, in quanto i sistemi
	che prendiamo in considerazione sono dinamici: possono ovvero avvenire
	shift, essere aggiunti o tolti oggetti e/o domini. Risulta anche poco
	scalabile in quanto, all'interno del sistema, si potrebbero avere un 
	numero elevato di soggetti ed oggetti.
\diam Possiamo organizzare la memorizzazione della tabella per \it{colonne} 
	tramite \bf{ACL}, distribuendo detta tabella su tutti gli oggetti del
	sistema e, in particolare nei sistemi Unix, ciò significa inserire
	queste credenziali d'accesso per ogni singolo file, all'interno dei suoi
	metadati corrispondenti. In questo modo otterremo delle associazioni 
	Dominio/Diritti, consentendo all'utente corrente, al gruppo a cui esso
	appartiene o agli altri particolari permessi di accesso: questi sono
	quindi modificabili direttamente dal possessore del file, in 
	particolare ad ogni dominio sono associati tre bit per settare i permessi
	di lettura/scrittura/esecuzione, di cui il decimo indica se è possibile
	effettuare lo setuid per quell'oggetto. 
\diam Possiamo organizzare la memorizzazione della tabella per \it{righe} tramite
	\bf{Capability}, distribuendo i permessi sui domini. Con questa tecnica,
	associamo per ogni utente un insieme di oggetti con i suoi permessi, 
	descrivendo quell'utente quali operazioni gli sono concesse.
.%

Descriviamo ora, alla luce delle considerazioni precedenti, quali sarebbero le
possibili implementazioni del reference monitor: possiamo rappresentare questo
come una costruzione che limita l'accesso dell'oggetto, che risulta accessibile
solamente tramite un'entrata sorvegliata da un controllore, che appunto media 
l'accesso all'oggetto (che eventualmente può essere automatizzato tramite un
meccanismo chiave-serratura, lasciando quindi il rischio nella creazione della
chiave):
%itemize
\item Tramite le \it{ACL}, il controllore media l'accesso all'oggetto tramite
	le stesse caratteristiche possedute dall'oggetto: al soggetto sarà 
	dunque consentito l'accesso unicamente se esso sarà registrato 
	all'interno della lista dei diritti.
\item Tramite le \it{Capability}, si fornisce un certificato di accesso per ogni
	oggetto che si vuole accedere, che quindi contiene anche l'identificativo
	del particolare oggetto al quale si vuole accedere. A questo punto non 
	importa più conoscere chi sia colui che vuole accedere all'oggetto, in
	quanto è sufficiente sapere che esso possiede le credenziali sufficienti 
	per accedervi. Da ciò segue che il controllore dovrà unicamente 
	verificare la validità del ``certificato'', in quanto su di questo 
	non saranno presenti le credenziali dell'utente che lo detiene.
.%

Vogliamo ora evitare il caso per il quale la capability possa essere genereata da un
altro processo che non avrebbe i diritti di possederla, generando semplicemente
dei bit: siamo costretti ad affermare che tale processo non deve sapere quale
sia la forma di detta capability: questo tuttavia si può ottenere criptando
con la chiave privata di crittografia simmetrica del sistema tale capability.
Tuttavia si dovrà
mantenere in chiaro l'informazione, in quanto altrimenti il processo non 
sarebbe in grado di conoscere a quale risorsa accedere: in questo modo possiamo
garantire un metodo per accorgerci delle eventuali modifiche che verranno
apportate nella capability in chiaro. Inoltre per evitare che sia possibile usare le nostre credenziali
da ciò che è stato memorizzato in chiaro, si aggiunge un \bf{codice di controllo}
- banalmente un certo numero di bit casuali,
che dovrà essere fornito anch'esso per poter accedere all'oggetto: in questo
modo si può effettuare la verifica che il codice di controllo sia corretto, e 
che la richiesta del processo sia effettivamente autorizzata dalla capability 
ricevuta. Questo codice di controllo potrebbe essere una serie di bit casuali,
che il sistema associa ad un dato soggetto prima di fornirgli la capability,
e memorizzando tale associazione per le future richieste di accesso con
capability. Questi vengono inoltre aggiunti perché ci sarebbe una bassa 
probabilità, se non nulla, di azzeccare casualmente il valore del crittogramma
della capability.

Le chiavi private delle capability possono essere generate in maniera dinamica:
in questo modo tuttavia il sistema 
deve tenere traccia di queste chiavi (questa tecnica ha tuttavia implicazioni sulla sicurezza
per la possibile compromissione della chiave, causando potenzialmente la compromissione
dell'intero sistema), o può essere un'unica chiave per tutti gli elementi
del sistema o ripartendola per tutti gli elementi in esso presenti.

Tuttavia a questo punto un processo, potrebbe fornire ad un altro le sue stesse 
credenziali d'accesso: a questo punto infatti si potrebbe minare l'integrità
del sistema semplicemente copiando i permessi che erano stati forniti ad un 
altro, e ripresentarli per ottenerli indebitamente. Per rendere quindi non 
trasferibili i permessi (anche se ciò in certi casi può essere ammesso), si possono
utilizzare i meccanismi di protezione del sistema operativo, perché tali capability
non siano direttamente accessibili al processo, che quindi non sarà in grado di 
accedere alle informazioni in esso contenute. Questo può essere implementato
mettendo tali informazioni all'interno della parte kernel corrispondente del 
processo utente, il quale potrà utilizzarle unicamente fornendo l'indice al 
sistema (ad esempio il file descriptor), gestendo tramite accesso al file
descriptor l'accesso alla risorsa, che potrà essere consentita o meno.


Concludendo, un sistema può possedere sia le Capability, sia le ACL: questa
strategia può quindi essere utilizzata per aumentare le prestazioni del nostro
sistema: la più prestante delle tecniche di controllo è la \bf{capability}, in
quanto non richiede una tecnica di autentificazione come le \bf{ACL} (di fatti
lo switch tra modo utente e kernel non influisce pesantemente sulle prestazioni
del sistema). Inoltre tramite capability non è necessario effettuare nessun 
controllo sulla correttezza del permesso memorizzato, in quanto si vuole 
garantire che non sia acessibile direttamente dall'utente. Anche se le Capability
sono efficienti, è necessario effettuare una prima autentificazione quando il
soggetto effettua l'accesso ad un file utilizzando quindi le ACL, fornendo
poi successivamente la capability per non dover richiederne l'accesso in futuro,
se non al rilascio della risorsa. Questo avviene quindi all'interno di Unix
all'atto della chiamata della system call \tt{open}, con la quale si controlla
che i permessi di accesso richiesti dall'utente corrispondono ai suoi privilegi
associati nel sistema; nel caso in cui il controllo dovesse passare, verrà 
restituito al processo un file descriptor, che indicherà l'indice all'interno
della parte kernel del processo della risorsa alla quale il processo potrà
accedere.

\section{Review e revocation}
Possiamo inoltre distinguere due tipi diversi di sistemi: i \bf{DAC} (\it{Discretionary
access control}), tramite i quali il proprietario stesso decide i diritti di 
accesso da consentire al suo gruppo ed al mondo esterno. I \bf{MAC} invece (\it{
Mandatory access control}) impongono un unico amministratore di sistema, il
quale può decidere le regole di accesso da stabilire per gli oggetti nel 
sistema. Questi meccanismi vengono inoltre richiesti all'interno di sistemi
che richiedono un altissimo livello di sicurezza e dove le strutture relazionali
degli utenti sono estremamente gerarchizzate, come quelle militari.

Visto che il sistema è dinamico, dobbiamo prevedere la possibilità che i permessi
agli accessi, che erano stati garantiti precedentemente, possano essere revocati
o rivisti. 

Per quanto concerne la \bf{review}, se abbiamo un'implementazione del sistema
con le \it{ACL}, si dovrebbe ricostruire tutta la Access Control Matrix accedendo
ad ogni singolo oggetto: questa tecnica è sì laboriosa, ma è semplice da effettuare.
Tramite le \it{Capability} invece, si ha la necessità di ricostruire lo stato
degli accessi ottenendo le informazioni, presenti all'interno della
loro memoria, per ogni singolo processo. In quanto questi valori non sono 
associati ai metadati ed in quanto un processo può memorizzare questi
permessi ovunque nella memoria che gli è associata (sempre se queste informazioni
non sono memorizzate all'interno dello spazio kernel, ma in quello utente), non 
si è concretamente in grado di effettuare una modifica all'interno dei suoi dati.



Per quanto concerne la \bf{revocation}, all'interno dei sistemi con \it{Capability}
si ha a che fare con lo stesso problema proprio dei certificati, ovvero quello di 
revocare il certificato precedentemente rilasciato, e quindi valido. Essendo 
inoltre detta capability memorizzata all'interno dei processi, dovremo:
%itemize
\item implementare un sistema di capability a durata limitata
\item concedere diritti di accesso non direttamente agli oggetti, ma ad una
	tabella che punta virtualmente agli oggetti. In questo modo possiamo
	fare in modo che nessuno che prima aveva la possibilità di accedere
	a quella risorsa lo possa fare in futuro rimuovendo la riga della 
	tabella, o consentire comunque un accesso solamente a determinati
	processi, inserendo in quel punto una nuova lista di processi che
	hanno il permesso di accedere a quell'oggetto.
.%
Questo sistema è quindi costoso ma fattibile. All'interno dei sistemi \it{ACL}
invece, sarà sufficiente cambiare i valori presenti all'interno dei metadati
associati alla risorsa in questione, (es.) all'interno dei sistemi Unix tramite
chiamata \tt{chmod}.
La revoca inoltre può essere:
%itemize
\item immediata o ritardata (subito o si può attendere)
\item selettiva o generale (per alcuni i domini o per tutti)
\item parziale o totale (tutti i diritti o solo alcuni)
\item temporanea o permanente
.%

\section{IDS - Intrusion Detection System}
Vogliamo ora avere un modo per ottenere delle informazioni di un attacco subito
(anche se idealmente vorremo ottenere delle informazioni mentre questo sta 
avvenendo, con un sistema analogo ad un antifurto informatico): questi non si 
dimostrano una soluzione definitiva al problema. Inoltre è possibile definire
un'\bf{intrusione} solamente tramite la specifica di politiche di sicurezza
desiderate dal sistema, definendo cosa è più o meno ammesso, e quindi si rileva
necessario che l'amministratore debba conoscere quali comportamenti sono da considerarsi
dannosi.

Una volta il \it{CERT} raccoglieva i possibili tipi di attacchi, 
e forniva in seguito delle istruzioni che servivano a descrivere come difendersi
da questi: tuttavia questo implicava una conoscenza molto settoriale ed avanzata
delle tematiche di sicurezza affrontate; oggi giorno 
si possono attivare degli  script detti \tt{cron}, tramite i quali si possono 
effettuare delle operazioni di manutenzione come \tt{root}. 

Tramite \bf{IDS} vogliamo invece automatizzare il processo di riconoscimento
degli attacchi, di modo che mi possa avvisare in seguito di qualcosa di sospetto.
In quanto si basa su tecniche di riconoscimento automatico secondo degli schemi
di comportamento, questo può essere affetto da falsi positivi o da falsi negativi:
bisogna quindi cercare un compromesso tra questi due possibili scenari.

L'\bf{IDS} può essere situato su di un singolo host (\it{host based}), può essere
situato su più host (\it{multihost based}), o può essere completamente decentralizzato
e sparso all'interno della rete (\it{network based}: in questo caso in genere è 
un oggetto fisico presente all'interno della rete, e serve anche per monitorare 
il traffico, oltre ad effettuare auditing dei dati ricevuti da un host). 
Si possono indivituare due metodi di riconoscimento degli attacchi:
%description
\item[Anomaly Based] dato uno stato ``tranquillo'' dove non avvengono intrusioni,
	cerca di intuire un'intrusione come una deviazione del modello iniziale:
	questo può avvenire tramite la misurazione di alcuni parametri rilevabili
	all'interno del sistema operativo, come l'utilizzo di CPU.
\item[Misuse Based] si posseggono vari ``pattern'' di intrusioni da quelli riconosciuti,
	che si cerca di riconoscere dai comportamenti osservati all'interno del
	sistema: questo implica che questi sistemi devono essere continuamente
	aggiornati\footnote{Questo meccanismo è analogo a quello del riconoscimento 
	dei virus. Questi meccanismi utilizzano reti neurali e machine learning.}.
.%
Definiamo ora alcune caratteristiche che questi sistemi devono possedere:
%itemize
\diam Questi meccanismi devono inoltre essere \it{fault-tolerant}, in quanto se il
sistema IDS è vulnerabile alla disattivazione da parte di un intruso, si rileva
completamente inutile: anche questo meccanismo deve essere quindi sicuro. Inoltre
deve essere in grado di resistere agli attacchi che possono essere inflitti al
sistema stesso.
\diam Non dovrebbero essere delle black-box, ovvero il suo comportamento dovrebbe
	comunque essere osservabile dall'esterno.
\diam Deve causare un overhead minimale nel sistema, altrimenti il sistema di
	riconoscimento è inutilizzabile
\diam Deve essere facilmente configurabile, in modo da adattarsi alle esigenze
	dei differenti utenti.
\diam Deve essere in grado di adattarsi al cambiamenti del sistema, (
	deve essere adattivo).
.%

Analizziamo ora brevemente come possiamo effettuare una risposta all'attacco,
dopo però che l'intrusione è già avvenuta. Come prima cosa è opportuno effettuare
un'analisi di tutte le informazioni che sono ottenibili, tramite tecniche di
``computer forencsis'', eventualmente comunicare alle parti in causa che è
avvenuto una forma di attacco, cercare di contenere l'intrusione se questa è
tutt'ora in atto, eliminare le debolezze del sistema che hanno consentito agli
attaccanti di sferrare l'attacco, e riportare il sistema alle condizioni 
precedenti (es. tramite un backup). È inoltre opportuno, una volta ottenute
tutte le prove, conservare tali informazioni, salvaguardando le informazioni
ottenute. 

\subsection{Honeypot}
Come suggerisce il nome, essa è una trappola, in modo da attrarre un hacker
con un computer poco sofisticato: tramite questo possiamo capire, tramite 
azioni concrete e campioni vere, capire come si comportano, essendo quindi
utile per prevenire attacchi successivi di questo tipo. Devono quindi essere
situati in un luogo non troppo difficile da raggiungere, come della \it{DMZ}
o nella rete esterna, nella quale lo hacker non deve superare alcun tipo di
attacco (alternativamente può essere situato anche all'interno della rete
locale). Tale honeypot deve inoltre avere delle caratteristiche comune: se 
così non fosse, l'attaccante potrebbe non cadere in trappola, in quanto ovviamente
non vuole rivelare le sue modalità di attacco: non deve quindi contenere pochi
comandi e nessun software, e deve contenere dei dati potenzialmente sensibili,
ma fasulli.
